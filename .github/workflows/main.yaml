on:
  pull_request:
    types: [opened, synchronize, edited, reopened]
  push:
  workflow_dispatch:
jobs:
  hol-light-to-dedukti:
    strategy:
      fail-fast: false
      matrix:
        ocaml-version-for-hol-light: [4.02.3]
        camlp5-version-for-hol-light: [6.17]
        ocaml-version-for-dedukti: [4.14.1]
        dedukti-version: [2.7]
        ocaml-version-for-lambdapi: [4.14.1]
        lambdapi-version: [2.3.0]
    runs-on: ubuntu-latest
    steps:
    # actions/checkout must be done BEFORE avsm/setup-ocaml
      - name: Checkout hol-light
        uses: actions/checkout@v3
      - name: Install opam
        uses: avsm/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-version-for-hol-light }}
      - name: Install hol-light dependencies
        run: opam install camlp5.6.17 num ocamlfind
      - name: Generate recursion.dk
        run: |
          eval `opam env`
          ./hol2dk xhol.ml recursion.dk
      - name: Generate recursion.lp
        run: |
          eval `opam env`
          ./hol2lp xhol.ml recursion.lp
#      - name: Install kocheck
#        run: |
#          cd ~
#          git clone https://github.com/01mf02/kontroli-rs.git
#          cd ~/kontroli-rs
#          cargo install --path kocheck
      - name: Check dk output with dkcheck
        run: |
          opam switch create dk ${{ matrix.ocaml-version-for-dedukti }}
          eval `opam env --switch=dk`
          opam install dedukti.${{ matrix.dedukti-version }}
          dk check recursion.dk
      - name: Check lp output with lambdapi
        run: |
          opam switch create lp ${{ matrix.ocaml-version-for-lambdapi }}
          eval `opam env --switch=lp`
          opam install lambdapi.${{ matrix.lambdapi-version }}
          lambdapi check recursion.lp
